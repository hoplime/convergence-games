"""Add UserGamePreference table

Revision ID: 372f89c58906
Revises: 13fc4b8d9adf
Create Date: 2025-08-06 20:37:40.516083

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from advanced_alchemy.types import (
    GUID,
    ORA_JSONB,
    DateTimeUTC,
    EncryptedString,
    EncryptedText,
    PasswordHash,
    StoredObject,
)
from alembic import op
from sqlalchemy import Text  # noqa: F401
from sqlalchemy.dialects import postgresql
if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText
sa.StoredObject = StoredObject

# revision identifiers, used by Alembic.
revision = '372f89c58906'
down_revision = '13fc4b8d9adf'
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('D0', 'D4', 'D6', 'D8', 'D10', 'D12', 'D20', name='usergamepreferencevalue').create(op.get_bind())
    op.create_table('user_game_preference',
    sa.Column('preference', postgresql.ENUM('D0', 'D4', 'D6', 'D8', 'D10', 'D12', 'D20', name='usergamepreferencevalue', create_type=False), nullable=False),
    sa.Column('game_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('user_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('created_by', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.Column('updated_by', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], name=op.f('fk_user_game_preference_created_by_user')),
    sa.ForeignKeyConstraint(['game_id'], ['game.id'], name=op.f('fk_user_game_preference_game_id_game')),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], name=op.f('fk_user_game_preference_updated_by_user')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_user_game_preference_user_id_user')),
    sa.PrimaryKeyConstraint('game_id', 'user_id', 'id', name=op.f('pk_user_game_preference')),
    sa.UniqueConstraint('game_id', 'user_id', name=op.f('uq_user_game_preference_game_id'))
    )
    with op.batch_alter_table('user_game_preference', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_game_preference_preference'), ['preference'], unique=False)

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_game_preference', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_game_preference_preference'))

    op.drop_table('user_game_preference')
    sa.Enum('D0', 'D4', 'D6', 'D8', 'D10', 'D12', 'D20', name='usergamepreferencevalue').drop(op.get_bind())
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
