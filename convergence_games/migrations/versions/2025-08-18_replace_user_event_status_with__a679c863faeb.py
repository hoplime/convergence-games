"""Replace user event status with transaction tables

Revision ID: a679c863faeb
Revises: 414cac901d0d
Create Date: 2025-08-18 23:16:07.494238

"""
# pyright: reportUnusedCallResult=false

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from advanced_alchemy.types import (
    GUID,
    ORA_JSONB,
    DateTimeUTC,
    EncryptedString,
    EncryptedText,
    StoredObject,
)
from alembic import op
from sqlalchemy import Text  # noqa: F401
from sqlalchemy.dialects import postgresql

if TYPE_CHECKING:
    pass

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText
sa.StoredObject = StoredObject

# revision identifiers, used by Alembic.
revision = "a679c863faeb"
down_revision = "414cac901d0d"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_event_compensation_transaction",
        sa.Column("current_balance", sa.Integer(), nullable=False),
        sa.Column("previous_balance", sa.Integer(), nullable=False),
        sa.Column("delta", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("user_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("previous_transaction_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=True),
        sa.Column("associated_time_slot_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=True),
        sa.Column("id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False, autoincrement=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("created_by", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=True),
        sa.Column("updated_by", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=True),
        sa.ForeignKeyConstraint(
            ["associated_time_slot_id"],
            ["time_slot.id"],
            name=op.f("fk_user_event_compensation_transaction_associated_time_slot_id_time_slot"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name=op.f("fk_user_event_compensation_transaction_created_by_user")
        ),
        sa.ForeignKeyConstraint(
            ["event_id", "user_id", "previous_transaction_id"],
            [
                "user_event_compensation_transaction.event_id",
                "user_event_compensation_transaction.user_id",
                "user_event_compensation_transaction.id",
            ],
            name="fk_compensation_transaction_previous_transaction",
        ),
        sa.ForeignKeyConstraint(
            ["event_id"], ["event.id"], name=op.f("fk_user_event_compensation_transaction_event_id_event")
        ),
        sa.ForeignKeyConstraint(
            ["previous_transaction_id"],
            ["user_event_compensation_transaction.id"],
            name=op.f(
                "fk_user_event_compensation_transaction_previous_transaction_id_user_event_compensation_transaction"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name=op.f("fk_user_event_compensation_transaction_updated_by_user")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_user_event_compensation_transaction_user_id_user")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_event_compensation_transaction")),
        sa.UniqueConstraint("event_id", "user_id", "id", name="uq_compensation_transaction_event_user_id"),
        sa.UniqueConstraint(
            "event_id", "user_id", "previous_transaction_id", name="uq_compensation_transaction_event_user_previous"
        ),
        sa.UniqueConstraint(
            "previous_transaction_id", name=op.f("uq_user_event_compensation_transaction_previous_transaction_id")
        ),
    )
    with op.batch_alter_table("user_event_compensation_transaction", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_user_event_compensation_transaction_associated_time_slot_id"),
            ["associated_time_slot_id"],
            unique=False,
        )
        batch_op.create_index(batch_op.f("ix_user_event_compensation_transaction_event_id"), ["event_id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_user_event_compensation_transaction_previous_transaction_id"),
            ["previous_transaction_id"],
            unique=False,
        )
        batch_op.create_index(batch_op.f("ix_user_event_compensation_transaction_user_id"), ["user_id"], unique=False)

    op.create_table(
        "user_event_d20_transaction",
        sa.Column("current_balance", sa.Integer(), nullable=False),
        sa.Column("previous_balance", sa.Integer(), nullable=False),
        sa.Column("delta", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("user_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False),
        sa.Column("previous_transaction_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=True),
        sa.Column("associated_time_slot_id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=True),
        sa.Column("id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False, autoincrement=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("created_by", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=True),
        sa.Column("updated_by", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=True),
        sa.ForeignKeyConstraint(
            ["associated_time_slot_id"],
            ["time_slot.id"],
            name=op.f("fk_user_event_d20_transaction_associated_time_slot_id_time_slot"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["user.id"], name=op.f("fk_user_event_d20_transaction_created_by_user")
        ),
        sa.ForeignKeyConstraint(
            ["event_id", "user_id", "previous_transaction_id"],
            [
                "user_event_d20_transaction.event_id",
                "user_event_d20_transaction.user_id",
                "user_event_d20_transaction.id",
            ],
            name="fk_d20_transaction_previous_transaction",
        ),
        sa.ForeignKeyConstraint(["event_id"], ["event.id"], name=op.f("fk_user_event_d20_transaction_event_id_event")),
        sa.ForeignKeyConstraint(
            ["previous_transaction_id"],
            ["user_event_d20_transaction.id"],
            name=op.f("fk_user_event_d20_transaction_previous_transaction_id_user_event_d20_transaction"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"], ["user.id"], name=op.f("fk_user_event_d20_transaction_updated_by_user")
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name=op.f("fk_user_event_d20_transaction_user_id_user")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_event_d20_transaction")),
        sa.UniqueConstraint("event_id", "user_id", "id", name="uq_d20_transaction_event_user_id"),
        sa.UniqueConstraint(
            "event_id", "user_id", "previous_transaction_id", name="uq_d20_transaction_event_user_previous"
        ),
        sa.UniqueConstraint(
            "previous_transaction_id", name=op.f("uq_user_event_d20_transaction_previous_transaction_id")
        ),
    )
    with op.batch_alter_table("user_event_d20_transaction", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_user_event_d20_transaction_associated_time_slot_id"),
            ["associated_time_slot_id"],
            unique=False,
        )
        batch_op.create_index(batch_op.f("ix_user_event_d20_transaction_event_id"), ["event_id"], unique=False)
        batch_op.create_index(
            batch_op.f("ix_user_event_d20_transaction_previous_transaction_id"),
            ["previous_transaction_id"],
            unique=False,
        )
        batch_op.create_index(batch_op.f("ix_user_event_d20_transaction_user_id"), ["user_id"], unique=False)

    with op.batch_alter_table("user_event_status", schema=None) as batch_op:
        batch_op.drop_index("ix_user_event_status_event_id")
        batch_op.drop_index("ix_user_event_status_user_id")

    op.drop_table("user_event_status")
    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_event_status",
        sa.Column("golden_d20s", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("compensation", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("event_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("created_by", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.BIGINT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(["created_by"], ["user.id"], name="fk_user_event_status_created_by_user"),
        sa.ForeignKeyConstraint(["event_id"], ["event.id"], name="fk_user_event_status_event_id_event"),
        sa.ForeignKeyConstraint(["updated_by"], ["user.id"], name="fk_user_event_status_updated_by_user"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="fk_user_event_status_user_id_user"),
        sa.PrimaryKeyConstraint("id", name="pk_user_event_status"),
    )
    with op.batch_alter_table("user_event_status", schema=None) as batch_op:
        batch_op.create_index("ix_user_event_status_user_id", ["user_id"], unique=False)
        batch_op.create_index("ix_user_event_status_event_id", ["event_id"], unique=False)

    with op.batch_alter_table("user_event_d20_transaction", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_event_d20_transaction_user_id"))
        batch_op.drop_index(batch_op.f("ix_user_event_d20_transaction_previous_transaction_id"))
        batch_op.drop_index(batch_op.f("ix_user_event_d20_transaction_event_id"))
        batch_op.drop_index(batch_op.f("ix_user_event_d20_transaction_associated_time_slot_id"))

    op.drop_table("user_event_d20_transaction")
    with op.batch_alter_table("user_event_compensation_transaction", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_event_compensation_transaction_user_id"))
        batch_op.drop_index(batch_op.f("ix_user_event_compensation_transaction_previous_transaction_id"))
        batch_op.drop_index(batch_op.f("ix_user_event_compensation_transaction_event_id"))
        batch_op.drop_index(batch_op.f("ix_user_event_compensation_transaction_associated_time_slot_id"))

    op.drop_table("user_event_compensation_transaction")
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
