"""Add parties

Revision ID: ad2d2d4ccbc1
Revises: 372f89c58906
Create Date: 2025-08-09 23:38:21.165195

"""

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from advanced_alchemy.types import (
    GUID,
    ORA_JSONB,
    DateTimeUTC,
    EncryptedString,
    EncryptedText,
    PasswordHash,
    StoredObject,
)
from alembic import op
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText
sa.StoredObject = StoredObject

# revision identifiers, used by Alembic.
revision = 'ad2d2d4ccbc1'
down_revision = '372f89c58906'
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('party',
    sa.Column('invite_code', sa.String(), nullable=False),
    sa.Column('time_slot_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('created_by', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.Column('updated_by', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], name=op.f('fk_party_created_by_user')),
    sa.ForeignKeyConstraint(['time_slot_id'], ['time_slot.id'], name=op.f('fk_party_time_slot_id_time_slot')),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], name=op.f('fk_party_updated_by_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_party'))
    )
    with op.batch_alter_table('party', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_party_invite_code'), ['invite_code'], unique=False)
        batch_op.create_index(batch_op.f('ix_party_time_slot_id'), ['time_slot_id'], unique=False)

    op.create_table('party_user_link',
    sa.Column('user_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('party_id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('is_leader', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('id', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=False),
    sa.Column('created_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTimeUTC(timezone=True), nullable=False),
    sa.Column('created_by', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.Column('updated_by', sa.BigInteger().with_variant(sa.Integer(), 'sqlite'), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['user.id'], name=op.f('fk_party_user_link_created_by_user')),
    sa.ForeignKeyConstraint(['party_id'], ['party.id'], name=op.f('fk_party_user_link_party_id_party')),
    sa.ForeignKeyConstraint(['updated_by'], ['user.id'], name=op.f('fk_party_user_link_updated_by_user')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_party_user_link_user_id_user')),
    sa.PrimaryKeyConstraint('user_id', 'party_id', 'id', name=op.f('pk_party_user_link')),
    sa.UniqueConstraint('user_id', 'party_id', name=op.f('uq_party_user_link_user_id'))
    )
    with op.batch_alter_table('party_user_link', schema=None) as batch_op:
        batch_op.create_index('ix_unique_party_leader', ['party_id'], unique=True, postgresql_where=sa.text('is_leader = true'))

    with op.batch_alter_table('game_content_warning_link', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_game_content_warning_link_game_id'), ['game_id', 'content_warning_id'])

    with op.batch_alter_table('game_genre_link', schema=None) as batch_op:
        batch_op.create_unique_constraint(batch_op.f('uq_game_genre_link_game_id'), ['game_id', 'genre_id'])

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('game_genre_link', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_game_genre_link_game_id'), type_='unique')

    with op.batch_alter_table('game_content_warning_link', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('uq_game_content_warning_link_game_id'), type_='unique')

    with op.batch_alter_table('party_user_link', schema=None) as batch_op:
        batch_op.drop_index('ix_unique_party_leader', postgresql_where=sa.text('is_leader = true'))

    op.drop_table('party_user_link')
    with op.batch_alter_table('party', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_party_time_slot_id'))
        batch_op.drop_index(batch_op.f('ix_party_invite_code'))

    op.drop_table('party')
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
